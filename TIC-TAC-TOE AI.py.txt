import random

EMPTY = ' '
PLAYER_X = 'X'
PLAYER_O = 'O'

def print_board(board):
    for row in board:
        print(' | '.join(row))
        print('-' * 5)

def is_winner(board, player):
    win_conditions = [
        [board[0][0], board[0][1], board[0][2]],  
        [board[1][0], board[1][1], board[1][2]],  
        [board[2][0], board[2][1], board[2][2]],  
        [board[0][0], board[1][0], board[2][0]],  
        [board[0][1], board[1][1], board[2][1]],  
        [board[0][2], board[1][2], board[2][2]],  
        [board[0][0], board[1][1], board[2][2]],  
        [board[2][0], board[1][1], board[0][2]],  
    ]
    return [player, player, player] in win_conditions

def is_full(board):
    return all(cell != EMPTY for row in board for cell in row)

def get_available_moves(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == EMPTY]

def minimax(board, depth, is_maximizing):
    if is_winner(board, PLAYER_X):
        return 10 - depth
    if is_winner(board, PLAYER_O):
        return depth - 10
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for r, c in get_available_moves(board):
            board[r][c] = PLAYER_X
            score = minimax(board, depth + 1, False)
            board[r][c] = EMPTY
            best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for r, c in get_available_moves(board):
            board[r][c] = PLAYER_O
            score = minimax(board, depth + 1, True)
            board[r][c] = EMPTY
            best_score = min(score, best_score)
        return best_score

def best_move(board):
    best_score = -float('inf')
    move = None
    for r, c in get_available_moves(board):
        board[r][c] = PLAYER_X
        score = minimax(board, 0, False)
        board[r][c] = EMPTY
        if score > best_score:
            best_score = score
            move = (r, c)
    return move

def alpha_beta(board, depth, alpha, beta, is_maximizing):
    if is_winner(board, PLAYER_X):
        return 10 - depth
    if is_winner(board, PLAYER_O):
        return depth - 10
    if is_full(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for r, c in get_available_moves(board):
            board[r][c] = PLAYER_X
            score = alpha_beta(board, depth + 1, alpha, beta, False)
            board[r][c] = EMPTY
            best_score = max(score, best_score)
            alpha = max(alpha, best_score)
            if beta <= alpha:
                break
        return best_score
    else:
        best_score = float('inf')
        for r, c in get_available_moves(board):
            board[r][c] = PLAYER_O
            score = alpha_beta(board, depth + 1, alpha, beta, True)
            board[r][c] = EMPTY
            best_score = min(score, best_score)
            beta = min(beta, best_score)
            if beta <= alpha:
                break
        return best_score

def best_move_with_alpha_beta(board):
    best_score = -float('inf')
    move = None
    alpha = -float('inf')
    beta = float('inf')
    for r, c in get_available_moves(board):
        board[r][c] = PLAYER_X
        score = alpha_beta(board, 0, alpha, beta, False)
        board[r][c] = EMPTY
        if score > best_score:
            best_score = score
            move = (r, c)
        alpha = max(alpha, best_score)
    return move

def main():
    board = [[EMPTY, EMPTY, EMPTY] for _ in range(3)]
    current_player = PLAYER_X  # AI starts first

    while True:
        print_board(board)
        if is_winner(board, PLAYER_X):
            print("AI wins!")
            break
        elif is_winner(board, PLAYER_O):
            print("You win!")
            break
        elif is_full(board):
            print("It's a tie!")
            break

        if current_player == PLAYER_X:
            move = best_move_with_alpha_beta(board)  # Use alpha-beta pruning
            board[move[0]][move[1]] = PLAYER_X
            current_player = PLAYER_O
        else:
            move = None
            while move not in get_available_moves(board):
                try:
                    move = tuple(map(int, input("Enter your move (row and column): ").strip().split()))
                except ValueError:
                    continue
            board[move[0]][move[1]] = PLAYER_O
            current_player = PLAYER_X

if __name__ == "__main__":
    main()
